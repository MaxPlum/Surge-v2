#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float3 Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float3 Constants_Emitter_AccelerationForce_Acceleration;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param4;
}

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_DynamicMaterialParameters
{
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_AddVelocityFromPoint
{
	float3 OriginOffset;
	float VelocityFalloffDistance;
	float VelocityStrength;
};

struct FParamMap0_Constants_Emitter_AccelerationForce
{
	float3 Acceleration;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AccelerationForce AccelerationForce;
	FParamMap0_Constants_Emitter_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0_AccelerationForce
{
	float3 Acceleration;
	int CoordinateSpace;
};

struct FParamMap0
{
	FParamMap0_AccelerationForce AccelerationForce;
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context);
void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context);
void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context);
void AccelerationForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AccelerationForce_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterIndex0Param1FloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result;
	float Result1 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant1 = 1e-05;
	float Result2 = max(Context.Map.ParticleState.Lifetime, Constant1);
	float Constant2 = 0.0001;
	float Result3 = Result2 - Constant2;
	bool Result4 = NiagaraAll(Result1 < Result3);
	bool Constant3 = false;
	bool bool_IfResult;
	if(Result4)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant3;
	}
	float Result5 = Result1 / Result2;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result1;
	Context.Map.Particles.NormalizedAge = Result5;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result6 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result6;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output0.a = Context.Map.ScaleColor.ScaleAlpha;
	float4 Result7 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result8 = Context.Map.ScaleColor.ColorValueToScale * Result7;
	Context.Map.Particles.Color = Result8;
	Context.Map.Transient.ParticleColorScaleFactor = Result7;
}

void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant7 = false;
	float3 Constant8 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant7)
	{
	Vector_IfResult = Constant8;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant14 = 0;
	bool Result9 = NiagaraAll(In_SourceSpace == Constant14);
	int Constant15 = 0;
	bool Result10 = NiagaraAll(In_DestinationSpace == Constant15);
	bool Result11 = Result9 && Result10;
	int Constant16 = 1;
	bool Result12 = NiagaraAll(In_SourceSpace == Constant16);
	int Constant17 = 1;
	bool Result13 = NiagaraAll(In_DestinationSpace == Constant17);
	bool Result14 = Result12 && Result13;
	bool Result15 = Result11 || Result14;
	int Constant18 = 2;
	bool Result16 = NiagaraAll(In_SourceSpace == Constant18);
	int Constant19 = 2;
	bool Result17 = NiagaraAll(In_DestinationSpace == Constant19);
	bool Result18 = Result16 && Result17;
	bool Result19 = Result15 || Result18;
	bool Result20 = Result9 && Result17;
	bool Result21 = Result16 && Result10;
	bool Result22 = Result20 || Result21;
	bool Result23 = In_bLocalSpace && Result22;
	bool Result24 = Result19 || Result23;
	bool Result25 = !In_bLocalSpace;
	bool Result26 = Result9 && Result13;
	bool Result27 = Result12 && Result10;
	bool Result28 = Result26 || Result27;
	bool Result29 = Result25 && Result28;
	bool Result30 = Result24 || Result29;
	bool Result31 = In_bLocalSpace && Result26;
	bool Result32 = Result16 && Result13;
	bool Result33 = Result31 || Result32;
	bool Result34 = Result25 && Result21;
	bool Result35 = Result33 || Result34;
	float4x4 Matrix_IfResult1;
	if(Result35)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result30;
	Out_OutTransform = Matrix_IfResult1;
}

void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant13 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant13, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result36 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result36;
	}
	Out_OutVector = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant30 = false;
	int Constant31 = 0;
	bool Result38 = NiagaraAll(In_RandomnessMode == Constant31);
	bool Result39 = Constant30 && Result38;
	int Constant32 = 1;
	bool Result40 = NiagaraAll(In_RandomnessMode == Constant32);
	bool Result41 = Result39 || Result40;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.Emitter.RandomSeed;
	}
	int Constant33 = 0;
	int Constant34 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant33;
	Seed3_IfResult = Constant34;
	}
	else
	{
	Seed1_IfResult = Context.Map.Particles.UniqueID;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant35 = -1;
	int Constant36 = -1;
	int Constant37 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result41)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant35;
	Seed2_IfResult1 = Constant36;
	Seed3_IfResult1 = Constant37;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result41;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant26 = (0);
	bool Constant27 = false;
	int Constant28 = 0;
	int Constant29 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant26, In_OverrideSeed, Constant28, Constant29, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float2 Result42 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float2 Result43 = rand_float(Result42, Seed1, Seed2, Seed3);
	float2 Result44 = rand_float(Result42);
	float2 Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result43;
	}
	else
	{
	Random_IfResult = Result44;
	}
	float2 Result45 = In_Min + Random_IfResult;
	Out_Result = Result45;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant43 = (0);
	bool Constant44 = false;
	int Constant45 = 0;
	int Constant46 = (0);
	bool Constant47 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant43, In_OverrideSeed, Constant45, Constant46, Constant47, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1, Context);
	float Result53 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed3;
	float Result54 = rand_float(Result53, Seed11, Seed21, Seed31);
	float Result55 = rand_float(Result53);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result54;
	}
	else
	{
	Random_IfResult1 = Result55;
	}
	float Result56 = In_Min + Random_IfResult1;
	Out_Result = Result56;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant23 = float2(0,-1);
	float2 Constant24 = float2(6.28319,1);
	bool Constant25 = false;
	float2 RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant23, Constant24, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant25, RandomRangeFloat_Func_Output_Result, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result.y;
	float Result46 = cos(Phi);
	float Result47 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result48 = 1 - Result47;
	float Result49 = sqrt(Result48);
	float Result50 = Result46 * Result49;
	float Result51 = sin(Phi);
	float Result52 = Result51 * Result49;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result50;
	PositionOnSphere.y = Result52;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant38 = 0;
	float Constant39 = 6.28319;
	int Constant40 = -1;
	int Constant41 = 0;
	bool Constant42 = false;
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant38, Constant39, Constant40, Constant41, Constant42, RandomRangeFloat_Func_Output_Result1, Context);
	float Result57 = cos(RandomRangeFloat_Func_Output_Result1);
	float Result58 = sin(RandomRangeFloat_Func_Output_Result1);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result57;
	PositionOnCircle.y = Result58;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result60 = length(In_V);
	bool Result61 = NiagaraAll(Result60 < In_Threshold);
	float Result62 = length(In_Fallback);
	float3 Vector_IfResult2;
	float float_IfResult;
	if(Result61)
	{
	Vector_IfResult2 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult2 = In_V;
	float_IfResult = Result60;
	}
	float3 Result63 = Vector_IfResult2 / float_IfResult;
	float3 Vector_IfResult3;
	float float_IfResult1;
	if(Result61)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult1 = Result62;
	}
	else
	{
	Vector_IfResult3 = Result63;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult3;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result61;
}

void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context)
{
	float3 Result59 = In_StartPosition - In_EndPosition;
	float Constant48 = 1e-05;
	float Constant49 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result59, In_FallbackVector, Constant48, Constant49, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float Constant50 = 0;
	float float_IfResult2;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold)
	{
	float_IfResult2 = Constant50;
	}
	else
	{
	float_IfResult2 = DirectionAndLengthSafe_Func_Output_Length;
	}
	float Result64 = min(float_IfResult2, In_Distance);
	float Constant51 = 0.0001;
	float Result65 = max(In_Distance, Constant51);
	float Result66 = Result64 / Result65;
	float Result67 = 1 - Result66;
	bool Result68 = NiagaraAll(float_IfResult2 <= In_Distance);
	Out_NormalizedRange = Result66;
	Out_InverseNormalizedRange = Result67;
	Out_NormalizedVectorBetweenPositions = DirectionAndLengthSafe_Func_Output_Direction;
	Out_WithinRange = Result68;
}

void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context)
{
	float NormalizeDistanceRange_Func_Output_NormalizedRange;
	float NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	float3 NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	bool NormalizeDistanceRange_Func_Output_WithinRange;
	NormalizeDistanceRange_Func_(In_StartPosition, In_EndPosition, In_Distance, In_FallbackVector, NormalizeDistanceRange_Func_Output_NormalizedRange, NormalizeDistanceRange_Func_Output_InverseNormalizedRange, NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions, NormalizeDistanceRange_Func_Output_WithinRange, Context);
	float float_IfResult3;
	if(In_InvertFalloff)
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	}
	else
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_NormalizedRange;
	}
	float Result69 = float_IfResult3 * In_FalloffScale;
	Out_Falloff = Result69;
	Out_NormalizedVectorBetweenPositions = NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	Out_NormalizedDistanceRange = float_IfResult3;
	Out_PositionIsWithinRange = NormalizeDistanceRange_Func_Output_WithinRange;
}

void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant11 = 0;
	bool Constant12 = false;
	float3 AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(Context.Map.Constants.Emitter.AddVelocityFromPoint.OriginOffset, Context.Map.AddVelocityFromPoint.OriginOffsetCoordinateSpace, Constant11, Constant12, AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result37 = AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector + Context.Map.AddVelocityFromPoint.VelocityOrigin;
	int Constant20 = -1;
	int Constant21 = 0;
	bool Constant22 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant20, Constant21, Constant22, RandomVector_Func_Output_Vector, Context);
	float DistanceBasedFalloff_Func_Output_Falloff;
	float3 DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
	bool DistanceBasedFalloff_Func_Output_PositionIsWithinRange;
	DistanceBasedFalloff_Func_(Context.Map.AddVelocityFromPoint.DefaultPosition, Result37, Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance, Context.Map.AddVelocityFromPoint.InvertVelocityFalloff, Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength, RandomVector_Func_Output_Vector, DistanceBasedFalloff_Func_Output_Falloff, DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions, DistanceBasedFalloff_Func_Output_NormalizedDistanceRange, DistanceBasedFalloff_Func_Output_PositionIsWithinRange, Context);
	float float_IfResult4;
	if(Context.Map.AddVelocityFromPoint.UseFalloffDistance)
	{
	float_IfResult4 = DistanceBasedFalloff_Func_Output_Falloff;
	}
	else
	{
	float_IfResult4 = Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength;
	}
	float3 Result70 = float_IfResult4 * DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float3 Result71 = Context.Map.Particles.Velocity + Result70;
	Context.Map.Particles.Velocity = Result71;
	Context.Map.OUTPUT_VAR.AddVelocityFromPoint.NormalizedFalloff = DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
}

void AccelerationForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant56 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant56, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result72 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult4;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result72;
	}
	Out_OutVector = Vector_IfResult4;
}

void AccelerationForce_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant54 = 0;
	bool Constant55 = false;
	float3 AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	AccelerationForce_NF_TransformVector_Emitter_Func_(Context.Map.Constants.Emitter.AccelerationForce.Acceleration, Context.Map.AccelerationForce.CoordinateSpace, Constant54, Constant55, AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result73 = Context.Map.Transient.PhysicsForce + AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	Context.Map.Transient.PhysicsForce = Result73;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result74 = Context.Map.Constants.Emitter.Drag.Drag + Context.Map.Transient.PhysicsDrag;
	Context.Map.Transient.PhysicsDrag = Result74;
	Context.Map.Transient.PhysicsRotationalDrag = Context.Map.Transient.PhysicsRotationalDrag;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant65 = 0.0001;
	float Result75 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant65);
	float Result76 = Reciprocal(Result75);
	float3 Result77 = Result76 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result77;
	float3 Result78 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant66 = 0;
	float Result79 = max(Context.Map.Transient.PhysicsDrag, Constant66);
	float Result80 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result79;
	float Constant67 = 1;
	float Result81 = Result80 + Constant67;
	float3 Result82 = Result78 / Result81;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result82;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result83 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result83;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant68 = float3(0,0,0);
	float Constant69 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant68;
	Drag_IfResult = Constant69;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value;
	SampleCurve_EmitterIndex0Param1FloatCurve(Context.Map.FloatFromCurve.CurveIndex, SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value);
	float Result84 = SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result84;
}

void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context)
{
	float X;
	float Y;
	float Z;
	float W;
	X = Context.Map.Particles.DynamicMaterialParameter.x;
	Y = Context.Map.Particles.DynamicMaterialParameter.y;
	Z = Context.Map.Particles.DynamicMaterialParameter.z;
	W = Context.Map.Particles.DynamicMaterialParameter.w;
	float float_IfResult5;
	if(Context.Map.DynamicMaterialParameters.Param0WriteEnabled)
	{
	float_IfResult5 = Context.Map.DynamicMaterialParameters.Index0Param1;
	}
	else
	{
	float_IfResult5 = X;
	}
	float float_IfResult6;
	if(Context.Map.DynamicMaterialParameters.Param1WriteEnabled)
	{
	float_IfResult6 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param2;
	}
	else
	{
	float_IfResult6 = Y;
	}
	float float_IfResult7;
	if(Context.Map.DynamicMaterialParameters.Param2WriteEnabled)
	{
	float_IfResult7 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param3;
	}
	else
	{
	float_IfResult7 = Z;
	}
	float float_IfResult8;
	if(Context.Map.DynamicMaterialParameters.Param3WriteEnabled)
	{
	float_IfResult8 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param4;
	}
	else
	{
	float_IfResult8 = W;
	}
	float4 Output11;
	Output11.x = float_IfResult5;
	Output11.y = float_IfResult6;
	Output11.z = float_IfResult7;
	Output11.w = float_IfResult8;
	Context.Map.Particles.DynamicMaterialParameter = Output11;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = true;
	Context.Map.DataInstance.Alive = Constant;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(1 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant4 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant4;
	EnterStatScope(2 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant5 = 2;
	Context.Map.AddVelocityFromPoint.OriginOffsetCoordinateSpace = Constant5;
	bool Constant6 = false;
	float3 AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	AddVelocityFromPoint_SimulationPosition_Emitter_Func_(AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.Map.AddVelocityFromPoint.VelocityOrigin = AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.Map.AddVelocityFromPoint.DefaultPosition = Context.Map.Particles.Position;
	bool Constant9 = true;
	Context.Map.AddVelocityFromPoint.InvertVelocityFalloff = Constant9;
	bool Constant10 = false;
	Context.Map.AddVelocityFromPoint.UseFalloffDistance = Constant10;
	EnterStatScope(3 );
	AddVelocityFromPoint_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant52 = 2;
	Context.Map.AccelerationForce.CoordinateSpace = Constant52;
	float3 Constant53 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant53;
	EnterStatScope(4 );
	AccelerationForce_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant57 = 0;
	Context.Map.Transient.PhysicsDrag = Constant57;
	float Constant58 = 0;
	Context.Map.Transient.PhysicsRotationalDrag = Constant58;
	EnterStatScope(5 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant59 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant59;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant60 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant60;
	float3 Constant61 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant61;
	float Constant62 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant62;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant63 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant63;
	bool Constant64 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant64;
	EnterStatScope(6 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.Map.DynamicMaterialParameters.Index0Param1 = FloatFromCurve_Emitter_Func_Output_Value;
	bool Constant70 = true;
	Context.Map.DynamicMaterialParameters.Param0WriteEnabled = Constant70;
	bool Constant71 = true;
	Context.Map.DynamicMaterialParameters.Param1WriteEnabled = Constant71;
	bool Constant72 = true;
	Context.Map.DynamicMaterialParameters.Param2WriteEnabled = Constant72;
	bool Constant73 = true;
	Context.Map.DynamicMaterialParameters.Param3WriteEnabled = Constant73;
	EnterStatScope(7 );
	DynamicMaterialParameters_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Particles.Color.r = InputDataFloat(0, 1);
	Context.Map.Particles.Color.g = InputDataFloat(0, 2);
	Context.Map.Particles.Color.b = InputDataFloat(0, 3);
	Context.Map.Particles.Color.a = InputDataFloat(0, 4);
	Context.Map.Particles.DynamicMaterialParameter.x = InputDataFloat(0, 5);
	Context.Map.Particles.DynamicMaterialParameter.y = InputDataFloat(0, 6);
	Context.Map.Particles.DynamicMaterialParameter.z = InputDataFloat(0, 7);
	Context.Map.Particles.DynamicMaterialParameter.w = InputDataFloat(0, 8);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 9);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 10);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 11);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 12);
	Context.Map.Particles.InitialRotation.x = InputDataFloat(0, 13);
	Context.Map.Particles.InitialRotation.y = InputDataFloat(0, 14);
	Context.Map.Particles.InitialRotation.z = InputDataFloat(0, 15);
	Context.Map.Particles.InitialRotation.w = InputDataFloat(0, 16);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 17);
	Context.Map.Particles.Mass = InputDataFloat(0, 18);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 19);
	Context.Map.Particles.MeshOrientation.x = InputDataFloat(0, 20);
	Context.Map.Particles.MeshOrientation.y = InputDataFloat(0, 21);
	Context.Map.Particles.MeshOrientation.z = InputDataFloat(0, 22);
	Context.Map.Particles.MeshOrientation.w = InputDataFloat(0, 23);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 24);
	Context.Map.Particles.Position.x = InputDataFloat(0, 25);
	Context.Map.Particles.Position.y = InputDataFloat(0, 26);
	Context.Map.Particles.Position.z = InputDataFloat(0, 27);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 28);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 29);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 30);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 31);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 32);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 33);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 34);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 35);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 36);
	Context.Map.Particles.UniqueID = InputDataInt(0, 37);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 38);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 39);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 40);
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.OriginOffset = Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	Context.Map.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance = Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength = Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	Context.Map.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.Map.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Engine.System.TickCount = Engine_System_TickCount;
	Context.Map.Constants.Emitter.AccelerationForce.Acceleration = Constants_Emitter_AccelerationForce_Acceleration;
	Context.Map.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.Map.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param2 = Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param3 = Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param4 = Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.w);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.InitialRotation.x);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.InitialRotation.y);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.InitialRotation.z);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.InitialRotation.w);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.MeshOrientation.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.MeshOrientation.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.MeshOrientation.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.MeshOrientation.w);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
