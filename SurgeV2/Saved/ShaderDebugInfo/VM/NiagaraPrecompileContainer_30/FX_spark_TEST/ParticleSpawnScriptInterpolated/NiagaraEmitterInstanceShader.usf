#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float3 Constants_Emitter_UniformRangedVector_Minimum;
	float3 Constants_Emitter_UniformRangedVector_Maximum;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	int Constants_Emitter_CylinderLocation_RandomSeed;
	float Constants_Emitter_CylinderLocation_CylinderHeight;
	float Constants_Emitter_CylinderLocation_CylinderRadius;
	float Constants_Emitter_CylinderLocation_SurfaceOnlyBandThickness;
	float3 Constants_Emitter_CylinderLocation_Offset;
	float3 Constants_Emitter_CylinderLocation_NonUniformScale;
	int Constants_Emitter_CylinderLocation_SpawnGroupMask;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float3 Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float3 Constants_Emitter_AccelerationForce_Acceleration;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float3 PREV_Constants_Emitter_UniformRangedVector_Minimum;
	float3 PREV_Constants_Emitter_UniformRangedVector_Maximum;
	int PREV_Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	int PREV_Constants_Emitter_CylinderLocation_RandomSeed;
	float PREV_Constants_Emitter_CylinderLocation_CylinderHeight;
	float PREV_Constants_Emitter_CylinderLocation_CylinderRadius;
	float PREV_Constants_Emitter_CylinderLocation_SurfaceOnlyBandThickness;
	float3 PREV_Constants_Emitter_CylinderLocation_Offset;
	float3 PREV_Constants_Emitter_CylinderLocation_NonUniformScale;
	int PREV_Constants_Emitter_CylinderLocation_SpawnGroupMask;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float3 PREV_Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float PREV_Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float PREV_Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float3 PREV_Constants_Emitter_AccelerationForce_Acceleration;
	float PREV_Constants_Emitter_Drag_Drag;
	float PREV_Constants_Emitter_Drag_RotationalDrag;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	float PREV_Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	float PREV_Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	float PREV_Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_CylinderLocation
{
	float3 CylinderNormal;
	float3 CylinderVector;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_CylinderLocation CylinderLocation;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_CylinderLocation
{
	float CylinderHeight;
	float CylinderRadius;
	float3 CylinderVector;
	float EndcapRatio;
	float Endcaps;
	float RandomAngle;
	float3 RandomDirection;
	float RandomRadius;
	float RandomRatio;
	float RandomZ;
	bool SurfaceOnly;
	float SurfaceOnlyZAxis;
	bool UseEndcapsSurfaceOnly;
	float XAxis;
	float YAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CylinderLocation CylinderLocation;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CylinderLocation
{
	int CoordinateSpace;
	float CylinderHeight;
	float3 CylinderOrigin;
	float CylinderRadius;
	bool EnableLatheProfile;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	float3 NonUniformScale;
	float3 Offset;
	int OrientationAxis;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	bool SurfaceOnly;
	float SurfaceOnlyBandThickness;
	bool UseEndcapsInSurfaceOnlyMode;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_InitialMeshOrientation
{
	float3 OrientationAxis;
	float3 OrientationVector;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_DynamicMaterialParameters
{
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_CylinderLocation
{
	float CylinderHeight;
	float CylinderRadius;
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_AddVelocityFromPoint
{
	float3 OriginOffset;
	float VelocityFalloffDistance;
	float VelocityStrength;
};

struct FParamMap0_Constants_Emitter_AccelerationForce
{
	float3 Acceleration;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AccelerationForce AccelerationForce;
	FParamMap0_Constants_Emitter_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants_Emitter_CylinderLocation CylinderLocation;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0_AccelerationForce
{
	float3 Acceleration;
	int CoordinateSpace;
};

struct FParamMap0
{
	FParamMap0_AccelerationForce AccelerationForce;
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants Constants;
	FParamMap0_CylinderLocation CylinderLocation;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedVector UniformRangedVector;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context);
void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float4 In_Min, float4 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float4 Out_Result, inout FSimulationContext Context);
void SampleCurve_EmitterLatheProfile(float In_X, out float Out_Value);
void CylinderLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void CylinderLocation_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context);
void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context);
void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context);
void AccelerationForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AccelerationForce_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterIndex0Param1FloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant21 = false;
	float3 Constant22 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant21)
	{
	Vector_IfResult = Constant22;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant34 = false;
	int Constant35 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant35);
	bool Result1 = Constant34 && Result;
	int Constant36 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant36);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant37 = 0;
	int Constant38 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant37;
	Seed3_IfResult = Constant38;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant39 = -1;
	int Constant40 = -1;
	int Constant41 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant39;
	Seed2_IfResult1 = Constant40;
	Seed3_IfResult1 = Constant41;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant29 = (0);
	bool Constant30 = false;
	int Constant31 = 0;
	int Constant32 = (0);
	bool Constant33 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant29, In_OverrideSeed, Constant31, Constant32, Constant33, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant48 = (0);
	bool Constant49 = false;
	int Constant50 = 0;
	int Constant51 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant48, In_OverrideSeed, Constant50, Constant51, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float3 Result8 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float3 Result9 = rand_float(Result8, Seed11, Seed21, Seed31);
	float3 Result10 = rand_float(Result8);
	float3 Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result9;
	}
	else
	{
	Random_IfResult1 = Result10;
	}
	float3 Result11 = In_Min + Random_IfResult1;
	Out_Result = Result11;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant46 = 0;
	bool Constant47 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedVector.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant46;
	Override_IfResult = Constant47;
	}
	float3 RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result1;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant56 = 0;
	bool Result12 = NiagaraAll(In_SourceSpace == Constant56);
	int Constant57 = 0;
	bool Result13 = NiagaraAll(In_DestinationSpace == Constant57);
	bool Result14 = Result12 && Result13;
	int Constant58 = 1;
	bool Result15 = NiagaraAll(In_SourceSpace == Constant58);
	int Constant59 = 1;
	bool Result16 = NiagaraAll(In_DestinationSpace == Constant59);
	bool Result17 = Result15 && Result16;
	bool Result18 = Result14 || Result17;
	int Constant60 = 2;
	bool Result19 = NiagaraAll(In_SourceSpace == Constant60);
	int Constant61 = 2;
	bool Result20 = NiagaraAll(In_DestinationSpace == Constant61);
	bool Result21 = Result19 && Result20;
	bool Result22 = Result18 || Result21;
	bool Result23 = Result12 && Result20;
	bool Result24 = Result19 && Result13;
	bool Result25 = Result23 || Result24;
	bool Result26 = In_bLocalSpace && Result25;
	bool Result27 = Result22 || Result26;
	bool Result28 = !In_bLocalSpace;
	bool Result29 = Result12 && Result16;
	bool Result30 = Result15 && Result13;
	bool Result31 = Result29 || Result30;
	bool Result32 = Result28 && Result31;
	bool Result33 = Result27 || Result32;
	bool Result34 = In_bLocalSpace && Result29;
	bool Result35 = Result19 && Result16;
	bool Result36 = Result34 || Result35;
	bool Result37 = Result28 && Result24;
	bool Result38 = Result36 || Result37;
	float4x4 Matrix_IfResult1;
	if(Result38)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result33;
	Out_OutTransform = Matrix_IfResult1;
}

void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant55 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant55, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result39 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result39;
	}
	Out_OutVector = Vector_IfResult1;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result43 = length(In_V);
	bool Result44 = NiagaraAll(Result43 < In_Threshold);
	float Result45 = length(In_Fallback);
	float3 Vector_IfResult2;
	float float_IfResult;
	if(Result44)
	{
	Vector_IfResult2 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult2 = In_V;
	float_IfResult = Result43;
	}
	float3 Result46 = Vector_IfResult2 / float_IfResult;
	float3 Vector_IfResult3;
	float float_IfResult1;
	if(Result44)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult1 = Result45;
	}
	else
	{
	Vector_IfResult3 = Result46;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult3;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result44;
}

void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float3 VECTOR_VAR;
	float NiagaraFloat;
	VECTOR_VAR.x = In_AxisAngle.x;
	VECTOR_VAR.y = In_AxisAngle.y;
	VECTOR_VAR.z = In_AxisAngle.z;
	NiagaraFloat = In_AxisAngle.w;
	float3 Result48 = normalize(VECTOR_VAR);
	float3 Vector_IfResult4;
	if(In_NormalizeAxis)
	{
	Vector_IfResult4 = Result48;
	}
	else
	{
	Vector_IfResult4 = VECTOR_VAR;
	}
	float Constant70 = 2;
	float Result49 = NiagaraFloat / Constant70;
	float Result50 = sin(Result49);
	float3 Result51 = Vector_IfResult4 * Result50;
	float Result52 = cos(Result49);
	float4 Output3;
	Output3.x = Result51.x;
	Output3.y = Result51.y;
	Output3.z = Result51.z;
	Output3.w = Result52;
	Out_Quaternion = Output3;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context)
{
	float Result40 = TWO_PI;
	float3 Result41 = In_RotationalVelocityVector * In_DeltaTime;
	float3 Result42 = Result40 * Result41;
	float3 Constant63 = float3(0,0,0);
	float Constant64 = 1e-05;
	float Constant65 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result42, Constant63, Constant64, Constant65, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float Constant66 = -1;
	float Constant67 = -1;
	float Constant68 = 1;
	float3 Output11;
	Output11.x = Constant66;
	Output11.y = Constant67;
	Output11.z = Constant68;
	float3 Result47 = DirectionAndLengthSafe_Func_Output_Direction * Output11;
	float4 Vector4;
	Vector4.x = Result47.x;
	Vector4.y = Result47.y;
	Vector4.z = Result47.z;
	Vector4.w = DirectionAndLengthSafe_Func_Output_Length;
	bool Constant69 = true;
	float4 AxisAngleToQuaternion_Func_Output_Quaternion;
	AxisAngleToQuaternion_Func_(Vector4, Constant69, AxisAngleToQuaternion_Func_Output_Quaternion, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion;
	MultiplyQuaternion_Func_(AxisAngleToQuaternion_Func_Output_Quaternion, In_ExistingOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion, Context);
	float4 Quat_IfResult;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold)
	{
	Quat_IfResult = In_ExistingOrientationQuat;
	}
	else
	{
	Quat_IfResult = MultiplyQuaternion_Func_Output_Quaternion;
	}
	Out_NewOrientationQuat = Quat_IfResult;
}

void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant52 = 0;
	int Constant53 = 0;
	bool Constant54 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector;
	InitialMeshOrientation_TransformVector_Emitter_Func_(Context.MapSpawn.InitialMeshOrientation.Rotation, Constant52, Constant53, Constant54, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Context);
	float Constant62 = 1;
	float4 ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	ApplyRotationVector_NormalizeRotations_true_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Constant62, Context.MapSpawn.Particles.MeshOrientation, ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat, Context);
	Context.MapSpawn.Particles.InitialRotation = ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	Context.MapSpawn.Particles.MeshOrientation = ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	int Constant71 = 0;
	Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace = Constant71;
	Context.MapSpawn.InitialMeshOrientation.OrientationVector = Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector;
	bool Constant72 = false;
	Context.MapSpawn.Local.InitialMeshOrientation.Temp = Constant72;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant103 = (0);
	bool Constant104 = false;
	int Constant105 = 0;
	int Constant106 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant103, In_OverrideSeed, Constant105, Constant106, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float2 Result53 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float2 Result54 = rand_float(Result53, Seed12, Seed22, Seed32);
	float2 Result55 = rand_float(Result53);
	float2 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result54;
	}
	else
	{
	Random_IfResult2 = Result55;
	}
	float2 Result56 = In_Min + Random_IfResult2;
	Out_Result = Result56;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant101 = float2(0,-1);
	float2 Constant102 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant101, Constant102, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result2, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result2.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result2.y;
	float Result57 = cos(Phi);
	float Result58 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result59 = 1 - Result58;
	float Result60 = sqrt(Result59);
	float Result61 = Result57 * Result60;
	float Result62 = sin(Phi);
	float Result63 = Result62 * Result60;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result61;
	PositionOnSphere.y = Result63;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant107 = 0;
	float Constant108 = 6.28319;
	int Constant109 = -1;
	int Constant110 = 0;
	bool Constant111 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant107, Constant108, Constant109, Constant110, Constant111, RandomRangeFloat_Func_Output_Result3, Context);
	float Result64 = cos(RandomRangeFloat_Func_Output_Result3);
	float Result65 = sin(RandomRangeFloat_Func_Output_Result3);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result64;
	PositionOnCircle.y = Result65;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomRangeFloat_Func_(float4 In_Min, float4 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float4 Out_Result, inout FSimulationContext Context)
{
	int Constant115 = (0);
	bool Constant116 = false;
	int Constant117 = 0;
	int Constant118 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant115, In_OverrideSeed, Constant117, Constant118, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3, Context);
	float4 Result66 = In_Max - In_Min;
	int Seed13;
	int Seed23;
	int Seed33;
	Seed13 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed1;
	Seed23 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed2;
	Seed33 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed3;
	float4 Result67 = rand_float(Result66, Seed13, Seed23, Seed33);
	float4 Result68 = rand_float(Result66);
	float4 Random_IfResult3;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3)
	{
	Random_IfResult3 = Result67;
	}
	else
	{
	Random_IfResult3 = Result68;
	}
	float4 Result69 = In_Min + Random_IfResult3;
	Out_Result = Result69;
}

void CylinderLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant136 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant136, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result96 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult11;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult11 = In_InVector;
	}
	else
	{
	Vector_IfResult11 = Result96;
	}
	Out_OutVector = Vector_IfResult11;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant145 = float2(0,-1);
	float2 Constant146 = float2(6.28319,1);
	bool Constant147 = false;
	float2 RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Constant145, Constant146, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant147, RandomRangeFloat_Func_Output_Result5, Context);
	float Phi1;
	float CosASC40ThetaASC411;
	Phi1 = RandomRangeFloat_Func_Output_Result5.x;
	CosASC40ThetaASC411 = RandomRangeFloat_Func_Output_Result5.y;
	float Result103 = cos(Phi1);
	float Result104 = CosASC40ThetaASC411 * CosASC40ThetaASC411;
	float Result105 = 1 - Result104;
	float Result106 = sqrt(Result105);
	float Result107 = Result103 * Result106;
	float Result108 = sin(Phi1);
	float Result109 = Result108 * Result106;
	float3 PositionOnSphere1;
	PositionOnSphere1.x = Result107;
	PositionOnSphere1.y = Result109;
	PositionOnSphere1.z = CosASC40ThetaASC411;
	float Constant148 = 0;
	float Constant149 = 6.28319;
	int Constant150 = -1;
	int Constant151 = 0;
	bool Constant152 = false;
	float RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Constant148, Constant149, Constant150, Constant151, Constant152, RandomRangeFloat_Func_Output_Result6, Context);
	float Result110 = cos(RandomRangeFloat_Func_Output_Result6);
	float Result111 = sin(RandomRangeFloat_Func_Output_Result6);
	float2 PositionOnCircle1;
	PositionOnCircle1.x = Result110;
	PositionOnCircle1.y = Result111;
	Out_UnitVector3D = PositionOnSphere1;
	Out_UnitVector2D = PositionOnCircle1;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D1;
	float2 RandomUnitVector_Func_Output_UnitVector2D1;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D1, RandomUnitVector_Func_Output_UnitVector2D1, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D1;
}

void CylinderLocation_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant99 = 0;
	bool Constant100 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.CylinderLocation.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.CylinderLocation.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.CylinderLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant99;
	Override_IfResult1 = Constant100;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.MapSpawn.Constants.Emitter.CylinderLocation.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.CylinderLocation.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float3 Constant112 = float3(0,0,1);
	float3 Rand_IfResult;
	if(Context.MapSpawn.CylinderLocation.SurfaceOnly)
	{
	Rand_IfResult = RandomUnitVector_Func_Output_UnitVector3D;
	}
	else
	{
	Rand_IfResult = Constant112;
	}
	float4 Constant113 = float4(0,0,-1,0);
	float4 Constant114 = float4(1,1,1,1);
	float4 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Constant113, Constant114, Context.MapSpawn.Constants.Emitter.CylinderLocation.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.CylinderLocation.FixedRandomSeed, RandomRangeFloat_Func_Output_Result4, Context);
	float X;
	float Y;
	float Z;
	float W;
	X = RandomRangeFloat_Func_Output_Result4.x;
	Y = RandomRangeFloat_Func_Output_Result4.y;
	Z = RandomRangeFloat_Func_Output_Result4.z;
	W = RandomRangeFloat_Func_Output_Result4.w;
	Context.MapSpawn.Local.CylinderLocation.RandomDirection = Rand_IfResult;
	Context.MapSpawn.Local.CylinderLocation.RandomRatio = X;
	Context.MapSpawn.Local.CylinderLocation.RandomAngle = Y;
	Context.MapSpawn.Local.CylinderLocation.RandomZ = Z;
	Context.MapSpawn.Local.CylinderLocation.RandomRadius = W;
	Context.MapSpawn.Local.CylinderLocation.SurfaceOnly = Context.MapSpawn.CylinderLocation.SurfaceOnly;
	Context.MapSpawn.Local.CylinderLocation.UseEndcapsSurfaceOnly = Context.MapSpawn.CylinderLocation.UseEndcapsInSurfaceOnlyMode;
	Context.MapSpawn.Local.CylinderLocation.CylinderHeight = Context.MapSpawn.Constants.Emitter.CylinderLocation.CylinderHeight;
	Context.MapSpawn.Local.CylinderLocation.CylinderRadius = Context.MapSpawn.Constants.Emitter.CylinderLocation.CylinderRadius;
	float Result70 = round(Context.MapSpawn.Local.CylinderLocation.RandomRatio);
	float Constant119 = 0;
	float Constant120 = 1;
	float Result71 = clamp(Result70,Constant119,Constant120);
	Context.MapSpawn.Local.CylinderLocation.EndcapRatio = Result71;
	float Constant121 = 1;
	float Result72 = sin(Context.MapSpawn.Local.CylinderLocation.RandomAngle*(TWO_PI/Constant121));
	float Result73 = abs(Result72);
	float float_IfResult2;
	if(Context.MapSpawn.CylinderLocation.HemisphereX)
	{
	float_IfResult2 = Result73;
	}
	else
	{
	float_IfResult2 = Result72;
	}
	float Constant122 = 1;
	float Result74 = cos(Context.MapSpawn.Local.CylinderLocation.RandomAngle*(TWO_PI/Constant122));
	float Result75 = abs(Result74);
	float float_IfResult3;
	if(Context.MapSpawn.CylinderLocation.HemisphereY)
	{
	float_IfResult3 = Result75;
	}
	else
	{
	float_IfResult3 = Result74;
	}
	Context.MapSpawn.Local.CylinderLocation.XAxis = float_IfResult2;
	Context.MapSpawn.Local.CylinderLocation.YAxis = float_IfResult3;
	float Constant123 = 0.0001;
	float Constant124 = 1;
	float Result76 = clamp(Context.MapSpawn.Local.CylinderLocation.RandomZ,Constant123,Constant124);
	float Result77 = ceil(Result76);
	float Result78 = sign(Context.MapSpawn.Local.CylinderLocation.RandomZ);
	float Result79 = Result77 * Result78;
	float Result80 = lerp(Context.MapSpawn.Local.CylinderLocation.RandomZ,Result79,Context.MapSpawn.Local.CylinderLocation.EndcapRatio);
	float Endcaps_IfResult;
	if(Context.MapSpawn.Local.CylinderLocation.UseEndcapsSurfaceOnly)
	{
	Endcaps_IfResult = Result80;
	}
	else
	{
	Endcaps_IfResult = Context.MapSpawn.Local.CylinderLocation.RandomZ;
	}
	float SurfaceOnlyZ_IfResult;
	if(Context.MapSpawn.Local.CylinderLocation.SurfaceOnly)
	{
	SurfaceOnlyZ_IfResult = Endcaps_IfResult;
	}
	else
	{
	SurfaceOnlyZ_IfResult = Context.MapSpawn.Local.CylinderLocation.RandomZ;
	}
	Context.MapSpawn.Local.CylinderLocation.SurfaceOnlyZAxis = SurfaceOnlyZ_IfResult;
	Context.MapSpawn.Local.CylinderLocation.Endcaps = Endcaps_IfResult;
	float3 Output12;
	Output12.x = Context.MapSpawn.Local.CylinderLocation.XAxis;
	Output12.y = Context.MapSpawn.Local.CylinderLocation.YAxis;
	Output12.z = Context.MapSpawn.Local.CylinderLocation.SurfaceOnlyZAxis;
	float Result81 = abs(Context.MapSpawn.Local.CylinderLocation.Endcaps);
	float Constant125 = 1;
	bool Result82 = NiagaraAll(Result81 == Constant125);
	float Result83 = sqrt(Context.MapSpawn.Local.CylinderLocation.RandomRadius);
	float Constant126 = 1;
	float3 Output0;
	Output0.x = Result83;
	Output0.y = Result83;
	Output0.z = Constant126;
	float3 Constant127 = float3(1,1,1);
	float3 Vector_IfResult5;
	if(Result82)
	{
	Vector_IfResult5 = Output0;
	}
	else
	{
	Vector_IfResult5 = Constant127;
	}
	float3 Vector_IfResult6;
	if(Context.MapSpawn.Local.CylinderLocation.SurfaceOnly)
	{
	Vector_IfResult6 = Vector_IfResult5;
	}
	else
	{
	Vector_IfResult6 = Output0;
	}
	float3 Result84 = Output12 * Vector_IfResult6;
	Context.MapSpawn.Local.CylinderLocation.CylinderVector = Result84;
	float Constant128 = 0.5;
	float Constant129 = 0.5;
	float Result85 = Context.MapSpawn.Local.CylinderLocation.SurfaceOnlyZAxis * Constant128 + Constant129;
	float SampleCurve_EmitterLatheProfileOutput_Value;
	SampleCurve_EmitterLatheProfile(Result85, SampleCurve_EmitterLatheProfileOutput_Value);
	float Result86 = SampleCurve_EmitterLatheProfileOutput_Value * Context.MapSpawn.Local.CylinderLocation.CylinderRadius;
	float float_IfResult4;
	if(Context.MapSpawn.CylinderLocation.EnableLatheProfile)
	{
	float_IfResult4 = Result86;
	}
	else
	{
	float_IfResult4 = Context.MapSpawn.Local.CylinderLocation.CylinderRadius;
	}
	float3 Output13;
	Output13.x = float_IfResult4;
	Output13.y = float_IfResult4;
	Output13.z = Context.MapSpawn.Local.CylinderLocation.CylinderHeight;
	float3 Result87 = Output13 * Context.MapSpawn.Local.CylinderLocation.CylinderVector;
	Context.MapSpawn.Local.CylinderLocation.CylinderVector = Result87;
	float3 Constant130 = float3(1,1,1);
	float3 Constant131 = float3(1,1,0);
	float3 Vector_IfResult7;
	if(Context.MapSpawn.Local.CylinderLocation.UseEndcapsSurfaceOnly)
	{
	Vector_IfResult7 = Constant130;
	}
	else
	{
	Vector_IfResult7 = Constant131;
	}
	float3 Result88 = Context.MapSpawn.Local.CylinderLocation.RandomDirection * Vector_IfResult7;
	float3 Result89 = Context.MapSpawn.Constants.Emitter.CylinderLocation.SurfaceOnlyBandThickness * Result88;
	float3 Result90 = Context.MapSpawn.Local.CylinderLocation.CylinderVector + Result89;
	float3 Vector_IfResult8;
	if(Context.MapSpawn.Local.CylinderLocation.SurfaceOnly)
	{
	Vector_IfResult8 = Result90;
	}
	else
	{
	Vector_IfResult8 = Context.MapSpawn.Local.CylinderLocation.CylinderVector;
	}
	Context.MapSpawn.Local.CylinderLocation.CylinderVector = Vector_IfResult8;
	int Constant132 = 0;
	bool Result91 = NiagaraAll(Context.MapSpawn.CylinderLocation.OrientationAxis == Constant132);
	int Constant133 = 1;
	bool Result92 = NiagaraAll(Context.MapSpawn.CylinderLocation.OrientationAxis == Constant133);
	bool Result93 = Result91 || Result92;
	float3 Output01;
	Output01.x = Context.MapSpawn.Local.CylinderLocation.CylinderVector.z;
	Output01.y = Context.MapSpawn.Local.CylinderLocation.CylinderVector.x;
	Output01.z = Context.MapSpawn.Local.CylinderLocation.CylinderVector.y;
	float3 Output02;
	Output02.z = Context.MapSpawn.Local.CylinderLocation.CylinderVector.y;
	Output02.y = Context.MapSpawn.Local.CylinderLocation.CylinderVector.z;
	Output02.x = Context.MapSpawn.Local.CylinderLocation.CylinderVector.x;
	float3 Vector_IfResult9;
	if(Result91)
	{
	Vector_IfResult9 = Output01;
	}
	else
	{
	Vector_IfResult9 = Output02;
	}
	float3 Vector_IfResult10;
	if(Result93)
	{
	Vector_IfResult10 = Vector_IfResult9;
	}
	else
	{
	Vector_IfResult10 = Context.MapSpawn.Local.CylinderLocation.CylinderVector;
	}
	Context.MapSpawn.Local.CylinderLocation.CylinderVector = Vector_IfResult10;
	float3 Result94 = Context.MapSpawn.CylinderLocation.CylinderOrigin + Context.MapSpawn.Constants.Emitter.CylinderLocation.Offset;
	float3 Result95 = Context.MapSpawn.Local.CylinderLocation.CylinderVector * Context.MapSpawn.Constants.Emitter.CylinderLocation.NonUniformScale;
	int Constant134 = 0;
	bool Constant135 = true;
	float3 CylinderLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	CylinderLocation_NF_TransformVector_Emitter_Func_(Result95, Context.MapSpawn.CylinderLocation.CoordinateSpace, Constant134, Constant135, CylinderLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result97 = Result94 + CylinderLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Constant137 = float3(1,1,0);
	float3 Constant138 = float3(0,0,1);
	float Constant139 = 1e-05;
	float Constant140 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Context.MapSpawn.Local.CylinderLocation.CylinderVector, Constant138, Constant139, Constant140, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float3 Result98 = Constant137 * DirectionAndLengthSafe_Func_Output_Direction1;
	float3 Result99 = Result98 * DirectionAndLengthSafe_Func_Output_Length1;
	float3 Constant141 = float3(0,0,1);
	float3 Result100 = DirectionAndLengthSafe_Func_Output_Direction1 * Constant141;
	float3 Result101 = DirectionAndLengthSafe_Func_Output_Length1 * Result100;
	float3 Result102 = lerp(Result99,Result101,Context.MapSpawn.Local.CylinderLocation.EndcapRatio);
	int Constant142 = -1;
	int Constant143 = 0;
	bool Constant144 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant142, Constant143, Constant144, RandomVector_Func_Output_Vector, Context);
	float3 Vector_IfResult12;
	if(Context.MapSpawn.Local.CylinderLocation.SurfaceOnly)
	{
	Vector_IfResult12 = Result102;
	}
	else
	{
	Vector_IfResult12 = RandomVector_Func_Output_Vector;
	}
	float3 Constant153 = float3(0,0,1);
	float Constant154 = 1e-05;
	float Constant155 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(Vector_IfResult12, Constant153, Constant154, Constant155, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	Context.MapSpawn.Particles.Position = Result97;
	Context.MapSpawn.OUTPUT_VAR.CylinderLocation.CylinderVector = Result97;
	Context.MapSpawn.OUTPUT_VAR.CylinderLocation.CylinderNormal = DirectionAndLengthSafe_Func_Output_Direction2;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result112 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result112;
	float Result113 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant157 = 1e-05;
	float Result114 = max(Context.MapUpdate.ParticleState.Lifetime, Constant157);
	float Constant158 = 0.0001;
	float Result115 = Result114 - Constant158;
	bool Result116 = NiagaraAll(Result113 < Result115);
	bool Constant159 = false;
	bool bool_IfResult;
	if(Result116)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant159;
	}
	float Result117 = Result113 / Result114;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result113;
	Context.MapUpdate.Particles.NormalizedAge = Result117;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result118 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result118;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output03;
	Output03.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output03.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output03.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output03.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result119 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output03;
	float4 Result120 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result119;
	Context.MapUpdate.Particles.Color = Result120;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result119;
}

void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant163 = false;
	float3 Constant164 = float3(0,0,0);
	float3 Vector_IfResult13;
	if(Constant163)
	{
	Vector_IfResult13 = Constant164;
	}
	else
	{
	Vector_IfResult13 = Context.MapUpdate.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult13;
}

void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant169 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant169, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result121 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult14;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult14 = In_InVector;
	}
	else
	{
	Vector_IfResult14 = Result121;
	}
	Out_OutVector = Vector_IfResult14;
}

void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context)
{
	float3 Result123 = In_StartPosition - In_EndPosition;
	float Constant173 = 1e-05;
	float Constant174 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(Result123, In_FallbackVector, Constant173, Constant174, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	float Constant175 = 0;
	float float_IfResult5;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold3)
	{
	float_IfResult5 = Constant175;
	}
	else
	{
	float_IfResult5 = DirectionAndLengthSafe_Func_Output_Length3;
	}
	float Result124 = min(float_IfResult5, In_Distance);
	float Constant176 = 0.0001;
	float Result125 = max(In_Distance, Constant176);
	float Result126 = Result124 / Result125;
	float Result127 = 1 - Result126;
	bool Result128 = NiagaraAll(float_IfResult5 <= In_Distance);
	Out_NormalizedRange = Result126;
	Out_InverseNormalizedRange = Result127;
	Out_NormalizedVectorBetweenPositions = DirectionAndLengthSafe_Func_Output_Direction3;
	Out_WithinRange = Result128;
}

void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context)
{
	float NormalizeDistanceRange_Func_Output_NormalizedRange;
	float NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	float3 NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	bool NormalizeDistanceRange_Func_Output_WithinRange;
	NormalizeDistanceRange_Func_(In_StartPosition, In_EndPosition, In_Distance, In_FallbackVector, NormalizeDistanceRange_Func_Output_NormalizedRange, NormalizeDistanceRange_Func_Output_InverseNormalizedRange, NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions, NormalizeDistanceRange_Func_Output_WithinRange, Context);
	float float_IfResult6;
	if(In_InvertFalloff)
	{
	float_IfResult6 = NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	}
	else
	{
	float_IfResult6 = NormalizeDistanceRange_Func_Output_NormalizedRange;
	}
	float Result129 = float_IfResult6 * In_FalloffScale;
	Out_Falloff = Result129;
	Out_NormalizedVectorBetweenPositions = NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	Out_NormalizedDistanceRange = float_IfResult6;
	Out_PositionIsWithinRange = NormalizeDistanceRange_Func_Output_WithinRange;
}

void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant167 = 0;
	bool Constant168 = false;
	float3 AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.OriginOffset, Context.MapUpdate.AddVelocityFromPoint.OriginOffsetCoordinateSpace, Constant167, Constant168, AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result122 = AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector + Context.MapUpdate.AddVelocityFromPoint.VelocityOrigin;
	int Constant170 = -1;
	int Constant171 = 0;
	bool Constant172 = false;
	float3 RandomVector_Func_Output_Vector1;
	RandomVector_Func_(Constant170, Constant171, Constant172, RandomVector_Func_Output_Vector1, Context);
	float DistanceBasedFalloff_Func_Output_Falloff;
	float3 DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
	bool DistanceBasedFalloff_Func_Output_PositionIsWithinRange;
	DistanceBasedFalloff_Func_(Context.MapUpdate.AddVelocityFromPoint.DefaultPosition, Result122, Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance, Context.MapUpdate.AddVelocityFromPoint.InvertVelocityFalloff, Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.VelocityStrength, RandomVector_Func_Output_Vector1, DistanceBasedFalloff_Func_Output_Falloff, DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions, DistanceBasedFalloff_Func_Output_NormalizedDistanceRange, DistanceBasedFalloff_Func_Output_PositionIsWithinRange, Context);
	float float_IfResult7;
	if(Context.MapUpdate.AddVelocityFromPoint.UseFalloffDistance)
	{
	float_IfResult7 = DistanceBasedFalloff_Func_Output_Falloff;
	}
	else
	{
	float_IfResult7 = Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.VelocityStrength;
	}
	float3 Result130 = float_IfResult7 * DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float3 Result131 = Context.MapUpdate.Particles.Velocity + Result130;
	Context.MapUpdate.Particles.Velocity = Result131;
	Context.MapUpdate.OUTPUT_VAR.AddVelocityFromPoint.NormalizedFalloff = DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
}

void AccelerationForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant181 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant181, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result132 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult15;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult15 = In_InVector;
	}
	else
	{
	Vector_IfResult15 = Result132;
	}
	Out_OutVector = Vector_IfResult15;
}

void AccelerationForce_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant179 = 0;
	bool Constant180 = false;
	float3 AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	AccelerationForce_NF_TransformVector_Emitter_Func_(Context.MapUpdate.Constants.Emitter.AccelerationForce.Acceleration, Context.MapUpdate.AccelerationForce.CoordinateSpace, Constant179, Constant180, AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result133 = Context.MapUpdate.Transient.PhysicsForce + AccelerationForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsForce = Result133;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result134 = Context.MapUpdate.Constants.Emitter.Drag.Drag + Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsDrag = Result134;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant190 = 0.0001;
	float Result135 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant190);
	float Result136 = Reciprocal(Result135);
	float3 Result137 = Result136 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result137;
	float3 Result138 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant191 = 0;
	float Result139 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant191);
	float Result140 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result139;
	float Constant192 = 1;
	float Result141 = Result140 + Constant192;
	float3 Result142 = Result138 / Result141;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result142;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result143 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result143;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant193 = float3(0,0,0);
	float Constant194 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant193;
	Drag_IfResult = Constant194;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value;
	SampleCurve_EmitterIndex0Param1FloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value);
	float Result144 = SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result144;
}

void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context)
{
	float X1;
	float Y1;
	float Z1;
	float W1;
	X1 = Context.MapUpdate.Particles.DynamicMaterialParameter.x;
	Y1 = Context.MapUpdate.Particles.DynamicMaterialParameter.y;
	Z1 = Context.MapUpdate.Particles.DynamicMaterialParameter.z;
	W1 = Context.MapUpdate.Particles.DynamicMaterialParameter.w;
	float float_IfResult8;
	if(Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled)
	{
	float_IfResult8 = Context.MapUpdate.DynamicMaterialParameters.Index0Param1;
	}
	else
	{
	float_IfResult8 = X1;
	}
	float float_IfResult9;
	if(Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled)
	{
	float_IfResult9 = Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param2;
	}
	else
	{
	float_IfResult9 = Y1;
	}
	float float_IfResult10;
	if(Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled)
	{
	float_IfResult10 = Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param3;
	}
	else
	{
	float_IfResult10 = Z1;
	}
	float float_IfResult11;
	if(Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled)
	{
	float_IfResult11 = Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param4;
	}
	else
	{
	float_IfResult11 = W1;
	}
	float4 Output14;
	Output14.x = float_IfResult8;
	Output14.y = float_IfResult9;
	Output14.z = float_IfResult10;
	Output14.w = float_IfResult11;
	Context.MapUpdate.Particles.DynamicMaterialParameter = Output14;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float4 Constant7 = float4(0,0,0,1);
	Context.MapSpawn.Particles.MeshOrientation = Constant7;
	float4 Constant8 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.InitialRotation = Constant8;
	float Constant9 = 0;
	Context.MapSpawn.Particles.Age = Constant9;
	float Constant10 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant10;
	float3 Constant11 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant11;
	float4 Constant12 = float4(0,0,0,0);
	Context.MapSpawn.Particles.DynamicMaterialParameter = Constant12;

	bool Constant13 = true;
	bool Constant14 = true;
	bool Constant15 = true;
	bool Constant16 = true;
	bool Constant17 = true;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant13;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant14;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant15;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant16;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant17;
	bool Constant18 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant18;
	bool Constant19 = false;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant19;
	bool Constant20 = false;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.InitializeParticle.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant23 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant23;
	float Constant24 = 0;
	float Constant25 = 1;
	int Constant26 = -1;
	int Constant27 = 0;
	bool Constant28 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant24, Constant25, Constant26, Constant27, Constant28, RandomRangeFloat_Func_Output_Result, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant42 = false;
	Context.MapSpawn.UniformRangedVector.OverrideRandomness = Constant42;
	int Constant43 = 0;
	Context.MapSpawn.UniformRangedVector.RandomnessMode = Constant43;
	bool Constant44 = false;
	Context.MapSpawn.UniformRangedVector.OverrideSeed = Constant44;
	bool Constant45 = false;
	Context.MapSpawn.UniformRangedVector.FixedRandomSeed = Constant45;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.MapSpawn.InitialMeshOrientation.Rotation = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	EnterStatScope(2 );
	InitialMeshOrientation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant73 = false;
	Context.MapSpawn.CylinderLocation.SurfaceOnly = Constant73;
	bool Constant74 = false;
	Context.MapSpawn.CylinderLocation.OverrideSeed = Constant74;
	bool Constant75 = false;
	Context.MapSpawn.CylinderLocation.OverrideRandomness = Constant75;
	int Constant76 = 0;
	Context.MapSpawn.CylinderLocation.RandomnessMode = Constant76;
	bool Constant77 = false;
	Context.MapSpawn.CylinderLocation.FixedRandomSeed = Constant77;
	float3 Constant78 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.CylinderLocation.RandomDirection = Constant78;
	float Constant79 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.RandomRatio = Constant79;
	float Constant80 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.RandomAngle = Constant80;
	float Constant81 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.RandomZ = Constant81;
	float Constant82 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.RandomRadius = Constant82;
	bool Constant83 = true;
	Context.MapSpawn.CylinderLocation.UseEndcapsInSurfaceOnlyMode = Constant83;
	bool Constant84 = (false);
	Context.MapSpawn.Local.CylinderLocation.SurfaceOnly = Constant84;
	bool Constant85 = (false);
	Context.MapSpawn.Local.CylinderLocation.UseEndcapsSurfaceOnly = Constant85;
	float Constant86 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.CylinderHeight = Constant86;
	float Constant87 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.CylinderRadius = Constant87;
	float Constant88 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.EndcapRatio = Constant88;
	bool Constant89 = false;
	Context.MapSpawn.CylinderLocation.HemisphereX = Constant89;
	bool Constant90 = false;
	Context.MapSpawn.CylinderLocation.HemisphereY = Constant90;
	float Constant91 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.XAxis = Constant91;
	float Constant92 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.YAxis = Constant92;
	float Constant93 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.SurfaceOnlyZAxis = Constant93;
	float Constant94 = (0.0);
	Context.MapSpawn.Local.CylinderLocation.Endcaps = Constant94;
	float3 Constant95 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.CylinderLocation.CylinderVector = Constant95;
	bool Constant96 = false;
	Context.MapSpawn.CylinderLocation.EnableLatheProfile = Constant96;
	int Constant97 = 2;
	Context.MapSpawn.CylinderLocation.OrientationAxis = Constant97;
	Context.MapSpawn.CylinderLocation.CylinderOrigin = Context.MapSpawn.Particles.Position;
	int Constant98 = 2;
	Context.MapSpawn.CylinderLocation.CoordinateSpace = Constant98;
	EnterStatScope(3 );
	CylinderLocation_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant156 = true;
	Context.MapUpdate.DataInstance.Alive = Constant156;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant160 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant160;
	EnterStatScope(5 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant161 = 2;
	Context.MapUpdate.AddVelocityFromPoint.OriginOffsetCoordinateSpace = Constant161;
	bool Constant162 = false;
	float3 AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	AddVelocityFromPoint_SimulationPosition_Emitter_Func_(AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapUpdate.AddVelocityFromPoint.VelocityOrigin = AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.AddVelocityFromPoint.DefaultPosition = Context.MapUpdate.Particles.Position;
	bool Constant165 = true;
	Context.MapUpdate.AddVelocityFromPoint.InvertVelocityFalloff = Constant165;
	bool Constant166 = false;
	Context.MapUpdate.AddVelocityFromPoint.UseFalloffDistance = Constant166;
	EnterStatScope(6 );
	AddVelocityFromPoint_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant177 = 2;
	Context.MapUpdate.AccelerationForce.CoordinateSpace = Constant177;
	float3 Constant178 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant178;
	EnterStatScope(7 );
	AccelerationForce_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant182 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant182;
	float Constant183 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant183;
	EnterStatScope(8 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant184 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant184;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant185 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant185;
	float3 Constant186 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant186;
	float Constant187 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant187;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant188 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant188;
	bool Constant189 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant189;
	EnterStatScope(9 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.DynamicMaterialParameters.Index0Param1 = FloatFromCurve_Emitter_Func_Output_Value;
	bool Constant195 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled = Constant195;
	bool Constant196 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled = Constant196;
	bool Constant197 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled = Constant197;
	bool Constant198 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled = Constant198;
	EnterStatScope(10 );
	DynamicMaterialParameters_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(11 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.x = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.y = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.z = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.w = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.x = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.y = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.w = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum = Constants_Emitter_UniformRangedVector_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum = Constants_Emitter_UniformRangedVector_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector = Constants_Emitter_InitialMeshOrientation_OrientationVector;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis = Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.RandomSeed = Constants_Emitter_CylinderLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.CylinderHeight = Constants_Emitter_CylinderLocation_CylinderHeight;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.CylinderRadius = Constants_Emitter_CylinderLocation_CylinderRadius;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.SurfaceOnlyBandThickness = Constants_Emitter_CylinderLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.Offset = Constants_Emitter_CylinderLocation_Offset;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.NonUniformScale = Constants_Emitter_CylinderLocation_NonUniformScale;
	Context.MapSpawn.Constants.Emitter.CylinderLocation.SpawnGroupMask = Constants_Emitter_CylinderLocation_SpawnGroupMask;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.OriginOffset = Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance = Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	Context.MapUpdate.Constants.Emitter.AddVelocityFromPoint.VelocityStrength = Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.AccelerationForce.Acceleration = Constants_Emitter_AccelerationForce_Acceleration;
	Context.MapUpdate.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.MapUpdate.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param2 = Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param3 = Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	Context.MapUpdate.Constants.Emitter.DynamicMaterialParameters.Index0Param4 = Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.w);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.x);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.y);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.z);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.w);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.w);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
